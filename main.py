import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandObject
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
import sqlite3
import datetime

import os
API_TOKEN = os.getenv("BOT_TOKEN") or "TOKEN_NOT_SET"
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

conn = sqlite3.connect("iris.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    coins INTEGER DEFAULT 0,
    role TEXT DEFAULT '',
    vip INTEGER DEFAULT 0,
    description TEXT DEFAULT '',
    age INTEGER DEFAULT NULL,
    last_salary TEXT DEFAULT '',
    last_spin TEXT DEFAULT '',
    admin_level TEXT DEFAULT ''
)
""")
conn.commit()

admin_levels = [
    "–º–ª–∞–¥—à–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ä–µ–¥–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç–∞—Ä—à–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    "–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å–æ–∑–¥–∞—Ç–µ–ª—å", "–≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞",
    "–∫–æ–º–∞–Ω–¥–∞ üå∏iris", "–º–µ–Ω–µ–¥–∂–µ—Ä üå∏iris", "—Å–æ–∑–¥–∞—Ç–µ–ª—å üå∏iris"
]

roles = {
    "üßë‚Äçüîß–ú–µ—Ö–∞–Ω–∏–∫": 300,
    "üöå–í–æ–¥–∏—Ç–µ–ª—å –ê–≤—Ç–æ–±—É—Å–∞": 250,
    "üëÆ‚Äç‚ôÇÔ∏è –ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π": 1000,
    "üöõ-–î–∞–ª—å–Ω–æ–±–æ–π—â–∏–∫": 400,
    "üßØ–ü–æ–∂–∞—Ä–Ω—ã–π": 1000,
    "üë®‚Äç‚öïÔ∏è–ú–µ–¥–∏–∫": 1000
}

vip_price = 1000000

@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    text = message.text.lower().strip()
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    user = cursor.fetchone()
    if not user:
        cursor.execute("INSERT INTO users (user_id) VALUES (?)", (user_id,))
        conn.commit()
        cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
        user = cursor.fetchone()

    if text == "–∫—Ç–æ —è" or text == "–∫—Ç–æ —Ç—ã":
        vip = "üëëVIP" if user[3] else ""
        age = f"–í–æ–∑—Ä–∞—Å—Ç: {user[5]}" if user[5] else "–í–æ–∑—Ä–∞—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"
        desc = f"üìù–û–ø–∏—Å–∞–Ω–∏–µ: {user[4]}" if user[4] else ""
        admin = f"üõ° {user[7]}" if user[7] else ""
        await message.answer(f"""üÜî <b>{message.from_user.full_name}</b>
üí∞ –ú–æ–Ω–µ—Ç—ã: {user[1]} EH - Coinü™ô
üîß –†–∞–±–æ—Ç–∞: {user[2] or "–ù–µ—Ç"}
üéÇ {age}
{vip}
{admin}
{desc}""")
    elif text == "+–≤–æ–∑—Ä–∞—Å—Ç":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (1-100):")
    elif text.isdigit() and 1 <= int(text) <= 100:
        cursor.execute("UPDATE users SET age=? WHERE user_id=?", (int(text), user_id))
        conn.commit()
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    elif text == "+—Ä–æ–ª—å":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=role, callback_data=f"role:{role}")]
            for role in roles.keys()
        ])
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=keyboard)
    elif text == "üé∞":
        now = datetime.datetime.utcnow()
        last = user[6]
        if last and (now - datetime.datetime.fromisoformat(last)).total_seconds() < 3600:
            await message.answer("üé∞ –£–∂–µ –∫—Ä—É—Ç–∏–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            cursor.execute("UPDATE users SET coins=coins+100, last_spin=? WHERE user_id=?", (now.isoformat(), user_id))
            conn.commit()
            await message.answer("üé∞ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 100 EH - Coinü™ô!")
    elif text == "–∫—É–ø–∏—Ç—å –≤–∏–ø":
        if user[1] >= vip_price:
            cursor.execute("UPDATE users SET coins=coins-?, vip=1 WHERE user_id=?", (vip_price, user_id))
            conn.commit()
            await message.answer("üëë VIP —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω!")
        else:
            await message.answer("üö®–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ EH-Coinü™ô")
    elif text.startswith("–æ–ø–∏—Å–∞–Ω–∏–µ") and user[3]:
        desc = message.text.replace("–æ–ø–∏—Å–∞–Ω–∏–µ", "").strip()
        cursor.execute("UPDATE users SET description=? WHERE user_id=?", (desc, user_id))
        conn.commit()
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    elif text == "–ø—Ä–∞–≤–∏–ª–∞":
        try:
            with open("rules.txt", "r", encoding="utf-8") as f:
                await message.answer(f.read())
        except:
            await message.answer("–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    elif text.startswith("—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞") and message.from_user.id == 7937614077:
        rules = message.text.replace("—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞", "").strip()
        with open("rules.txt", "w", encoding="utf-8") as f:
            f.write(rules)
        await message.answer("–ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    elif text == "—É–∫ —Ä—Ñ":
        await message.answer("üîó https://www.consultant.ru/document/cons_doc_LAW_10699/")
    elif text == "–∫–∞—Ä—Ç–∞":
        await message.answer("üó∫ –ö–ê–†–¢–ê: https://www.google.com/search?q=Emergency+Hamburg+–∫–∞—Ä—Ç–∞")
    elif text == "–∫–∞–ª–ª" and message.chat.type != "private":
        await message.answer("@all üîî", disable_notification=False)

@dp.callback_query()
async def handle_callbacks(callback_query: types.CallbackQuery):
    data = callback_query.data
    user_id = callback_query.from_user.id
    if data.startswith("role:"):
        role = data.split(":", 1)[1]
        cursor.execute("UPDATE users SET role=? WHERE user_id=?", (role, user_id))
        conn.commit()
        await callback_query.message.answer(f"–†–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {role}")
        await callback_query.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())